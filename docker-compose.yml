services:
  mysql:
    image: mysql:${MYSQL_VER}
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        # run initialization
        run-script.sh +patch-db
        # run entrypoint
        docker-entrypoint.sh mysqld
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./var/mysql:/var/lib/mysql
      - ./config/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./scripts/patch-db.sh:/scripts/patch-db.sh
      - ./data/sql:/sql
      - ./data/patches:/sql-patches
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  mongodb:
    image: mongo:${MONGODB_VER}
    restart: unless-stopped
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./var/mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
  node:
    image: node:${NODE_VER}-bookworm
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        export TARGET_DIR=/home/nodeapp
        export EXCLUDE_FILE=/config/node-exclude.txt
        export COPY_FILES="app.json"
        # run initialization
        run-script.sh timezone sync-src hostkey npm-install ready
        # run entrypoint
        CERT_DIR=/config/cert
        cd "$${TARGET_DIR}"
        docker-entrypoint.sh node app.js \
          --ssl-key=$${CERT_DIR}/cert.key \
          --ssl-cert=$${CERT_DIR}/cert.crt-combined \
          --config=app.json
    expose:
      - 443
    working_dir: /home/nodeapp
    environment:
      APP_TIMEZONE: ${APP_TIMEZONE}
      APT_MIRROR: ${APT_MIRROR}
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./config:/config
      - ./scripts:/scripts
      - ./src/nodeapp:/src
    extra_hosts:
      - host.docker.internal:host-gateway
  php:
    image: php:${PHP_VER}-apache
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        export TARGET_DIR=/home/www
        export EXCLUDE_FILE=/config/www-exclude.txt
        export APACHE_APP_CONF=/config/app.conf
        # run initialization
        run-script.sh timezone sync-src apt apache php ready +sshd
        # run entrypoint
        docker-php-entrypoint apache2-foreground
    expose:
      - 443
    healthcheck:
      test: cat /tmp/.ready
      start_period: 30s
      start_interval: 15s
    working_dir: /home/www
    environment:
      APP_DEBUG: ${APP_DEBUG}
      APP_TIMEZONE: ${APP_TIMEZONE}
      APT_MIRROR: ${APT_MIRROR}
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./config:/config
      - ./scripts:/scripts
      - ./src/www:/src
      - ./var/cache:/cache
    depends_on:
      - mysql
      - mongodb
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
  nginx:
    image: nginx:${NGINX_VER}
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        # run initialization
        run-script.sh timezone
        # run entrypoint
        /docker-entrypoint.sh nginx -g "daemon off;"
    environment:
      APP_TIMEZONE: ${APP_TIMEZONE}
      APT_MIRROR: ${APT_MIRROR}
    ports:
      - ${APP_HTTP_PORT}:80
      - ${APP_HTTPS_PORT}:443
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./config:/config
      - ./config/default.conf.template:/etc/nginx/templates/default.conf.template
    depends_on:
      - php
  cron:
    image: debian:${DEBIAN_VER}
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        export CRON_DIR=/cron
        export TARGET_DIR=$${CRON_DIR}
        export ENV_FILE_PATTERN=/config/*.env
        # run initialization
        run-script.sh timezone apt cron hostkey ssh mongodb-client mysql-client genenv
        # start cron
        echo "Starting cron..."
        cron -f -L 15
    environment:
      APP_TIMEZONE: ${APP_TIMEZONE}
      APT_MIRROR: ${APT_MIRROR}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./bin/run-script.sh:/usr/local/bin/run-script.sh
      - ./config:/config
      - ./scripts:/scripts
      - ./cron:/cron
      - ./backup:/backup
